{"mappings":"imBAsBA,IAAAA,EACAC,E,iFArBA,IAAIC,EAAU,GAoBdF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,G,EAelCL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,C,uCCnBTE,EAAAC,QAAiBC,OAAoB,KAAOC,EAAA,SAAAC,QAA6C,UAAWC,MAAK,IAAMF,EAAc,U,ICA7HA,EAAA,SAAAG,SAA8CC,KAAKC,MAAM,mGCEzD,IAAIC,EAA4B,GAYhC,MAgBMC,EAAM,CAACC,EAAcC,KACzB,MAAMC,EAAaJ,EAAYK,MAAKC,GAAcA,EAAWJ,OAASA,IACtE,GAAIE,EAAY,CACd,MAAMG,EAAkBH,EAAWI,WAAWH,MAAKI,GAAaA,EAAUP,OAASC,IACnF,GAAII,EACFA,EAAgBG,OAAS,MACpB,CACL,MAAMD,EAAuB,CAAEP,KAAMC,EAAUO,MAAO,GACtDN,EAAWI,WAAWG,KAAKF,E,MAExB,CACL,MACMG,EAAyB,CAAEV,KAAMA,EAAMM,WAAY,CAD5B,CAAEN,KAAMC,EAAUO,MAAO,KAEtDV,EAAYW,KAAKC,E,CAGnB,OAAOT,CAAQ,EAGXU,EAAoBX,IACxB,MAAME,EAAaJ,EAAYK,MAAKC,GAAcA,EAAWJ,OAASA,IAEtE,GAAIE,EAAY,CACd,MAAMU,EAlCkB,CAACN,IAC3B,MAAMM,EAAsB,GAO5B,OANAN,EAAWO,SAAQN,IACjB,MAAMvB,EAAIuB,EAAUC,MACdM,EAAkB,IAAIC,MAAM/B,IAAIgC,KAAI,IAAMT,EAAUP,OAC1DY,EAAYH,QAAQK,EAAgB,IAG/BF,CAAW,EA0BIK,CAAoBf,EAAWI,YACnD,OAxCiBY,EAwCEN,GAvCPO,KAAKC,MAAMD,KAAKE,SAAWH,EAAMjC,Q,CAD7B,IAACiC,EA2CnB,OAAO,IAAI,EAGPI,EAAmB,KACvB,IAAIC,EAAoB,GACpBC,EAAW,GACXC,EAAY,EAEhB,KAAuB,OAAhBF,KACDE,EAAY,MADW,CAE3BA,IAEAF,EADiBZ,EAAiBY,GAGd,OAAhBA,IAAsBC,EAAWA,EAASE,OAAOH,G,CAGvD,OAAOC,CAAQ,EAYXG,EAAgBC,IACpB,MAAMC,EAAqBC,SAASC,cAAc,OAClDF,EAAmBG,UAAYJ,EAETE,SAASG,cAAc,YAC9BC,YAAYL,EAAmB,EAGhDrC,EAAA,SAAmBE,MAAMyC,IAyBvBL,SAASG,cAAc,aAAaG,iBAAiB,SAxBrC,KACd,MAAMC,EAAgBP,SAASG,cAAc,WACzCI,IAAeA,EAAcC,UAAY,IAE7CxC,EAAc,GAEdqC,EAASI,QAAQ,CAAEC,QAAS,sDAAuDC,OAAM,CAACC,EAAQC,KAChG,MAAMC,EAA+Cd,SAASG,cAAc,SAC5CW,EAASC,MAnBQC,MAAM,MAqB7CjC,SAASe,IA5BG,CAACJ,IAC3BA,EAASuB,QAAO,CAAC/C,EAAMC,IAAaF,EAAIC,EAAMC,IAAW,IAEzD,MAAM+C,EAAOxB,EAASyB,OAAM,GAAI,GAChClD,EAAIiD,EAAM,KAAK,EA2BTE,CAFaP,EAAUQ,SAASvB,GACVZ,KAAIoC,GAASA,EAAMC,eACZ,IAG/B,IAAI,IAAIrE,EAAE,EAAGA,EAAI,GAAIA,IAAI,CACvB,MAAMsE,EAAoBhC,IAC1BK,EAAa2B,E,IAGf,GAGkE","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-ef45173db4593df1.js","node_modules/@parcel/runtime-js/lib/runtime-3cbc646661c0ed59.js","src/index.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"5fbcJ\"))).then(() => parcelRequire('6iY2t'));","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"l1gf1\\\":\\\"index.f0c5804e.js\\\",\\\"5fbcJ\\\":\\\"kuromoji.c82d710c.js\\\"}\"));","type word = string | null;\n\nlet parentWords: ParentWord[] = [];\n\ninterface ParentWord {\n  word: string;\n  childWords: ChildWord[];\n}\n\ninterface ChildWord {\n  word: word;\n  count: number;\n}\n\nconst randomArray = (array: any[]) => {\n  const index = Math.floor(Math.random() * array.length);\n  return array[index];\n}\n\nconst generateRandomTable = (childWords: ChildWord[]): word[] => {\n  const randomTable: word[] = [];\n  childWords.forEach(childWord => {\n    const i = childWord.count;\n    const additionalTable = [...Array(i)].map(() => childWord.word);\n    randomTable.push(...additionalTable);\n  });\n\n  return randomTable;\n}\n\nconst add = (word: string, nextWord: word) => {\n  const targetWord = parentWords.find(ParentWord => ParentWord.word === word);\n  if (targetWord) {\n    const targetChildWord = targetWord.childWords.find(childWord => childWord.word === nextWord);\n    if (targetChildWord) {\n      targetChildWord.count += 1;\n    } else {\n      const childWord: ChildWord = { word: nextWord, count: 1};\n      targetWord.childWords.push(childWord)\n    }\n  } else {\n    const childWord: ChildWord = { word: nextWord, count: 1};\n    const parentWord: ParentWord = { word: word, childWords: [childWord] };\n    parentWords.push(parentWord);\n  }\n\n  return nextWord;\n}\n\nconst generateNextWord = (word): word => {\n  const targetWord = parentWords.find(ParentWord => ParentWord.word === word);\n\n  if (targetWord) {\n    const randomTable = generateRandomTable(targetWord.childWords);\n    return randomArray(randomTable);\n  }\n\n  return null;\n}\n\nconst generateSentence = (): string => {\n  let currentWord: word = '';\n  let sentence = '';\n  let countStop = 0;\n\n  while (currentWord !== null) {\n    if (countStop > 100) break;\n    countStop++;\n    const nextWord = generateNextWord(currentWord);\n    currentWord = nextWord;\n\n    if (currentWord !== null) sentence = sentence.concat(currentWord);\n  }\n\n  return sentence;\n}\n\nconst registerParentWords = (sentence: any[]) => {\n  sentence.reduce((word, nextWord) => add(word, nextWord), \"\");\n\n  const last = sentence.slice(-1)[0]\n  add(last, null);\n}\n\nconst splitSentence = (text: string): string[] => text.split(\"\\n\");\n\nconst outputResult = (text) => {\n  const resultChildElement = document.createElement('div');\n  resultChildElement.innerText = text;\n\n  const resultElement = document.querySelector('#result');\n  resultElement?.appendChild(resultChildElement);\n};\n\nimport('kuromoji').then((kuromoji) => {\n  const analyze = () => {\n    const resultElement = document.querySelector('#result');\n    if (resultElement) resultElement.innerHTML = '';\n\n    parentWords = [];\n\n    kuromoji.builder({ dicPath: \"https://cdn.jsdelivr.net/npm/kuromoji@0.1.2/dict/\" }).build((_error, tokenizer) => {\n      const textarea: HTMLInputElement = <HTMLInputElement>document.querySelector('#text');\n      const sentences = splitSentence(textarea.value)\n\n      sentences.forEach((text) => {\n        const path = tokenizer.tokenize(text);\n        const sentence = path.map(token => token.surface_form);\n        registerParentWords(sentence);\n      });\n\n      for(let i=0; i < 10; i++){\n        const generatedSentence = generateSentence();\n        outputResult(generatedSentence);\n      }\n\n    });\n  };\n\n  document.querySelector('#analyze')?.addEventListener('click', analyze);\n});\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","module","exports","import","parcelRequire","resolve","then","register","JSON","parse","$b4e14b6b8da86996$var$parentWords","$b4e14b6b8da86996$var$add","word","nextWord","targetWord","find","ParentWord","targetChildWord","childWords","childWord","count","push","parentWord","$b4e14b6b8da86996$var$generateNextWord","randomTable","forEach","additionalTable","Array","map","$b4e14b6b8da86996$var$generateRandomTable","array","Math","floor","random","$b4e14b6b8da86996$var$generateSentence","currentWord","sentence","countStop","concat","$b4e14b6b8da86996$var$outputResult","text","resultChildElement","document","createElement","innerText","querySelector","appendChild","kuromoji","addEventListener","resultElement","innerHTML","builder","dicPath","build","_error","tokenizer","textarea","value","split","reduce","last","slice","$b4e14b6b8da86996$var$registerParentWords","tokenize","token","surface_form","generatedSentence"],"version":3,"file":"index.f0c5804e.js.map"}